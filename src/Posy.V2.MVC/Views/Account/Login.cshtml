@using Posy.V2.Infra.CrossCutting.Identity.Model
@using Posy.V2.Infra.CrossCutting.Common.Resources
@model LoginViewModel
@{
    Layout = "~/Views/Shared/_Account.cshtml";
    ViewBag.Title = "Login";
}

@using (Html.BeginForm("Login", "Account", new { ReturnUrl = ViewBag.ReturnUrl }, FormMethod.Post, new { @class = "form-horizontal", role = "form", id = "loginform" }))
{
    @Html.AntiForgeryToken()

    <h1 class="display-4 text-center">@UIConfigLogin.Conectar</h1>
    <hr />

    @*@Html.ValidationSummary(true, "", new { @class = "text-danger" })*@
    <div class="form-group">
        @Html.LabelFor(m => m.Email, new { @class = "control-label" })
        @Html.TextBoxFor(m => m.Email, new { @class = "form-control" })
        @*@Html.ValidationMessageFor(m => m.Email, "", new { @class = "text-danger" })*@
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.Password, new { @class = "control-label" })
        @Html.PasswordFor(m => m.Password, new { @class = "form-control" })
        @*@Html.ValidationMessageFor(m => m.Password, "", new { @class = "text-danger" })*@
    </div>
    <div class="form-group">
        @Html.CheckBoxFor(m => m.RememberMe)
        @Html.LabelFor(m => m.RememberMe)
    </div>
    <div class="form-group">
        <input type="submit" value="@UIConfigLogin.Conectar" class="btn btn-primary btn-lg btn-block" />
    </div>
    <div class="row">
        <div class="col">@Html.ActionLink(UIConfigLogin.RegistrarUmaNovaConta, "Register", null, new { @class = "text-reset" })</div>
        <div class="col text-right">@Html.ActionLink(UIConfigLogin.EsqueceuSuaSenha, "ForgotPassword", null, new { @class = "text-reset" })</div>
    </div>
}
<div class="form-group">
    @Html.Partial("_ExternalLoginsListPartial", new ExternalLoginListViewModel { ReturnUrl = ViewBag.ReturnUrl })
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script type="text/javascript">
        //(function ($) {
        //    $.validator.setDefaults({
        //        onsubmit: true,
        //        onkeyup: false,
        //        onfocusout: false,
        //        onfocusin: false,
        //        showErrors: function (errorMap, errorList) {
        //            //if (errorList.length > 0) {
        //            //    var errors = errorList.map(function (element) {
        //            //        return element.message;
        //            //    }).join('\r\n');
        //            //    alert(errors);
        //            //}
        //            if (errorList.length > 0)
        //                fnErrorGlobal(errorList[0].message);
        //        }
        //    });
        //})(jQuery);

        $(function () {
            $('form').bind('invalid-form.validate', function (error, element) {
                fnError(element.errorList[0].message);
            });
        });
    </script>
    @if (!ViewData.ModelState.IsValid)
    {
        <script type="text/javascript">
            var errors = @Html.Raw(
                Json.Encode(
                    string.Join(
                        Environment.NewLine,
                        ViewData.ModelState
                                .Where(x => x.Value.Errors.Count > 0)
                                .SelectMany(x => x.Value.Errors)
                                .Select(error => error.ErrorMessage))
                    )
            );
            fnError(errors);
        </script>
    }
}
